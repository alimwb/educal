openapi: '3.0.0'
info:
  title: Educal
  version: '1.0'
servers:
  - url: http://localhost:3000/api/v1
paths:
  /auth/signup:
    post:
      tags: [Auth]
      summary: User signup
      security:
        - {} 
      description: Use this route for user registering. After signup, the user's authorization token will be kept and used by server.
      requestBody:
        description: All fields must be included.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: user@example.com
                password:
                  type: string
                  description: Must contain at lesat 8 characters and be the same as "passwordConfirm" field.
                  example: 12345678
                passwordConfirm:
                  type: string
                  description: Must be the same as "password" field.
                  example: 12345678

      responses:
        200:
          description: The user data is returned.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: A message to show to the user when the request is successful.
                    example: خوش آمدید
                  user:
                    $ref: '#/components/schemas/user'

        400:
          $ref: '#/components/responses/res400'

  /auth/login:
    post:
      tags: [ 'Auth' ]
      summary: User login
      security:
        - {}      
      description: User can login using both email and phone number.
      requestBody:
        description: Use this route for user login.
        content:
          application/json:
            schema: 
              required:
                - login
                - password
              type: object
              properties:
                login: 
                  type: string
                  description: User's email or phone number.
                  example: user@example.com
                password:
                  type: string
                  example: 12345678
      responses:
        200:
          description: The user data is returned.
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: "#/components/schemas/user"
                  message:
                    $ref: "#/components/schemas/message"
        400:
          $ref: "#/components/responses/res400"
        401:
          $ref: "#/components/responses/res401"

  /user/profile:
    get:
      tags:
        - User
      summary: Get user's profile info
      security:
        - authToken: []
      description: The client can get the user's profile info using this route. User must be logged in.
      responses:
        200: 
          description: If the user hasn't completed the profile, some fields may be null.
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/user"
        401:
          $ref: "#/components/responses/res401"
      
  /user/profile/update:
    put:
      tags:
        - User
      security:
        - { authToken: [] }
      summary: Update user's profile
      description: User must be logged in to access this route. If the user's email is changed, the authToken cookie will be replaced.
      requestBody:
        description: All the fields are optional (you can only provide the ones you want to update).
        content:
          application/json:
            schema: 
              type: object
              properties:
                firstName:
                  type: string
                  description: User's first name. Must contain at least 1 character.
                  example: Hadi
                lastName:
                  type: string
                  description: User's last name. Must contain at least 1 character.
                  example: Moshtaghi
                tel:
                  type: string
                  description: User's phone number. Must contain 11 characters.
                  example: 09011234567
                nationalId:
                  type: string
                  description: User's national Id. Must contain 10 characters.
                  example: 0123456789
                email:
                  type: string
                  description: User's valid email.
                  example: user@example.com
      responses:
        200:
          description: User's profile is updated.
          content:
            application/json:
              schema: 
                type: object
                properties:
                  user: 
                    $ref: "#/components/schemas/user"
                  message: 
                    $ref: "#/components/schemas/message"
        400:
          $ref: "#/components/responses/res400"
        401:
          $ref: "#/components/responses/res401"

  /user/logout:
    post: 
      tags:
        - User
      security:
        - { authToken: [] }
      summary: User logout
      description: The user must be logged in.
      responses:
        200:
          description: User is logged out successfully.
          content:
            application/json:
              schema: 
                type: object
                properties:
                  message:
                    $ref: "#/components/schemas/message"
        401: 
          $ref: "#/components/responses/res401"

  /user/profile/avatar/upload:
    put:
      tags:
        - User
      security:
        - { authToken: [] }
      summary: Upload user avatar
      description: User must be logged in.
      requestBody:
        description: The image must be sent as a file (not base64). Limitations => size upto 2 MB, supported formats are .jpg, .jpeg, .png, .webp.
        content:
          application/json:
            schema: 
              type: object
              properties:
                img:
                  type: object
                  description: Image File.
      responses:
        200: 
          description: Profile pic is uploaded and user's data is updated.
          content:
            application/json:
              schema: 
                type: object
                properties:
                  url:
                    $ref: "#/components/schemas/imgUrl"
                  message:
                    $ref: "#/components/schemas/message"
        400:
          $ref: "#/components/responses/res400"
        401:
          $ref: "#/components/responses/res401"

  /user/profile/avatar/remove:
    delete:
      tags:
        - User
      security:
        - { authToken: [] }
      summary: Remove avatar image
      description: User must be logged in. User must have an avatar uploaded or else there will be an error.
      responses:
        200: 
          description: Avatar image is removed.
          content:
            application/json: 
              schema: 
                type: object
                properties:
                  message: 
                    $ref: "#/components/schemas/message"
        400:
          $ref: "#/components/responses/res400"
        401:
          $ref: "#/components/responses/res401"

  /user/cart/add/{courseId}:
    put: 
      tags:
        - User
      security:
        - { authToken: [] }
      summary: Add a course tot cart
      description: User must be logged in. Using this route, you can add a course to user's shop cart by course id. 
      parameters:
        - name: courseId
          in: path
          required: true
          schema: 
            type: number
            example: 1
      responses:
        200: 
          description: The course is added to cart. You can see the cart at <code>/user/cart</code>.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: 
                    $ref: "#/components/schemas/message"
        400:
          $ref: "#/components/responses/res400"
        401:
          $ref: "#/components/responses/res401"

  /course/all:
    get:
      tags:
        - Course
      security:
        - {}
      summary: Get a list of courses
      description: Get a list of all courses. You can provide a query to filter out the results.
      parameters:
        - name: category
          in: query
          description: An array of the categories of courses. You can get the list from <code>/api/v1/courses/categoriesList</code>.
          schema:
            type: string
            example: backend
        - name: teacher
          in: query
          description: The name of the course teacher.
          schema:
            type: string
            example: حسین کمالی
        - name: date
          in: query
          description: Sort results based on published date. Valid values are <code>asc</code>(old to new) and <code>desc</code>(new to old). Default to <code>desc</code>.
          schema: 
            type: string
            example: asc
            enum:
              - asc
              - desc
        - name: rating
          in: query
          description: Sort results based on published date. Valid values are <code>asc</code>(low to high) and <code>desc</code>(high to low). Default to <code>desc</code>.
          schema: 
            type: boolean
            example: true
            enum:
              - asc 
              - desc 
      responses:
        200:
          description: The result contains an array of the object schema below or an empty array if there's no record matching the query.
          content:
            application/json:
              schema: 
                type: object
                properties:
                  courses: 
                    type: array
                    items:
                      properties:
                        _id:
                          type: number
                          example: 2
                        title:
                          type: string
                          example: <span dir="rtl">دوره مبتدی React.js</span>
                        coverUrl:
                          type: string
                          description: The name of the image. Access via "/api/v1/img/{coverUrl}".
                          example: image.jpg
                        category: 
                          type: string
                          example: frontend
                        rating:
                          type: number
                          example: 4
                        price: 
                          type: string
                          example: 4500000
                        teacher:
                          type: object
                          properties:
                            _id:
                              type: number
                              example: 2
                            fullName:
                              type: string
                              example: حسین کمالی
                  count: 
                    type: number
                    example: 10

  /course/categoriesList:
    get:
      tags:
        - Course
      security:
        - {}
      summary: Get categories list
      description: You'll be given a list of all available categories.
      responses:
        200: 
          description: The response is an array of strings.
          content:
            application/json:
              schema: 
                type: array
                items: 
                  type: string
                  example: backend
      
  /course/{id}:
    get:
      tags:
        - Course
      security:
        - {}
      summary: Get a course details
      description: Using this route, you can get a course's details.
      responses:
        200: 
          description: The response contains the schema below.
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/course"
        400:
          $ref: "#/components/responses/res400"
        404: 
          $ref: "#/components/responses/res404"

components:
  securitySchemes:
    authToken:
      description: This cookie is set and used by server.
      name: authToken
      type: apiKey
      in: cookie

  responses:
    res400:
      description: The inputs or parameters provided by client are not valid.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
    res401:
      description: The client is not authorized with the provided credentials.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
    res404:
      description: The route/resource you look for doesn't exist.
      content:
        application/json:
          schema: 
            $ref: "#/components/schemas/error"

  schemas:
    error:
      type: object
      properties:
        errors:
          type: array
          items:
            type: object
            properties:
              code:
                type: number
                description: HTTP error code
              message:
                type: string
                description: Error reason
        headers:
          type: object
          description: Headers sent from client
        reqBody:
          type: object
          description: Request body sent from client
        parameters:
          type: object
          description: Parameters sent from client 
    user:
      type: object
      properties:
        _id: 
          type: number
          example: 1
        firstName:
          type: string
          description: User's first name.
          example: Hadi
        lastName:
          type: string
          description: User's last name.
          example: Moshtaghi
        tel:
          type: string
          description: User's phone number.
          example: 09011234567
        nationalId:
          type: string
          description: User's national Id.
          example: 0123456789
        email:
          type: string
          description: User's valid email.
          example: user@example.com
        avatarUrl:
          type: string
          description: User's avatar address. The size is 100*100.
          example: image.jpg
        originalAvatarUrl:
          type: string
          description: User's original avatar address. It has the actual size of the image.
          example: image.jpg
        joined:
          type: number
          description: Timestamp of the time when user first joined.
          example: 2023-07-25T06:41:35.730Z
    course: 
      type: object
      properties:
        _id:
          type: number
          example: 3
        title:
          type: string
          example: دوره Next.js مبتدی
        coverUrl:
          type: string
          description: The name of the image. Access via "/api/v1/img/{coverUrl}".
        category:
          type: string
          example: frontend
        price:
          type: string
          example: '4500000'
        skillLevel:
          type: string
          enum:
            - all
            - beginner
            - intermediate
            - expert
        lastUpdate:
          type: string
          description: The string form of Date().
        overview:
          type: string
          description: The description of the course.
          example: دوره مبتدی نکست. مدرس آقای حسین کمالی.
        rating:
          type: number
          example: 0
        teacher:
          type: object
          properties:
            _id: 
              type: number
              example: 2
            fullName: 
              type: string
              example: حسین کمالی
            role:
              type: string
              example: مدرس
            profilePicUrl:
              type: string
              description: The name of the image. Access via "/api/v1/img/{profilePicUrl}".
    message:
      type: string
      description: A message to show to the user when the request is successful.
    imgUrl:
      type: string
      description: The uploaded image name. Use it in this form => /api/v1/img/{image name}.
      example: image.jpg

security:
  - authToken: []
